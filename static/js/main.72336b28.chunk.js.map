{"version":3,"sources":["actions/action.js","components/Search/index.js","components/History/history.js","components/Results/Result.js","App.js","serviceWorker.js","reducers/rootReducer.js","constants/searchConst.js","index.js"],"names":["fetchResults","query","dispatch","a","axios","get","response","type","results","data","hits","err","Search","state","currentInput","handleInputChange","event","newInput","target","value","setState","handleSubmit","preventDefault","props","search","Form","onSubmit","this","Control","className","placeholder","onChange","style","maxWidth","textAlign","Button","Component","connect","history","userInput","terms","History","previousSearch","id","searches","map","key","variant","onClick","Results","handleSearchResults","length","result","title","href","url","points","author","created_at","num_comments","App","Result","Boolean","window","location","hostname","match","rootReducer","action","error","payload","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.72336b28.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nexport const fetchResults = (query) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await axios.get(\"https://hn.algolia.com/api/v1/search?query=\" + query);\r\n            dispatch({ type: 'FETCH_ARTICLES', results: response.data.hits });\r\n        }\r\n        catch (err) { dispatch({ type: 'FETCH_RESULTS_ERROR', err }); }\r\n    }\r\n}\r\n\r\n\r\nexport const search = (userInput) => {\r\n    return {\r\n        type: 'CREATE_SEARCH',\r\n        userInput: userInput\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchResults, search } from '../../actions/action'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        currentInput: ''\r\n    }\r\n\r\n    \r\n    handleInputChange = (event) => {\r\n        let newInput = event.target.value;\r\n        this.setState({\r\n            currentInput: newInput\r\n        });\r\n    }\r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.props.search(this.state.currentInput)\r\n        this.props.fetchResults(this.state.currentInput)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <Form.Control\r\n                    className=\"mx-auto\"\r\n                    placeholder=\"Search\"\r\n                    type='search'\r\n                    onChange={this.handleInputChange}\r\n                    style={{ maxWidth: '200px', textAlign: 'center' }}>\r\n                </Form.Control><Button className='primary' type='submit'>Search</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        history: state.history,\r\n        results: state.data\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        search: (value) => { dispatch(search(value)) },\r\n        fetchResults: (terms) => dispatch(fetchResults(terms))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { connect } from 'react-redux';\r\nimport { fetchResults } from '../../actions/action'\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchResults: (terms) => dispatch(fetchResults(terms))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searches: state.searches\r\n    }\r\n};\r\n\r\nclass History extends Component {\r\n\r\n    previousSearch = (event) => {\r\n        this.props.fetchResults(event.target.id)\r\n    }\r\n\r\n    render() {\r\n        const { searches } = this.props;\r\n        return (\r\n            <div>\r\n                <h2>Search History</h2>\r\n                {\r\n                    searches.map(search => {\r\n                        return (\r\n                            <div key={search}>\r\n                            <Button variant='warning' id={search} key={search} onClick={this.previousSearch}>{search}</Button>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(History);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        results: state.results\r\n    }\r\n}\r\n\r\nclass Results extends Component {\r\n\r\n    handleSearchResults = () => {\r\n        if (this.props.results.length === 0) {\r\n            return (\r\n                <p className=\"text-info text-dark p-3 m-2\">No results</p>\r\n            )\r\n        } else {\r\n            const { results } = this.props;\r\n            return (\r\n                <div className=\"list-group p-2\">\r\n                    {results.map(result => {\r\n                        return (\r\n                            <>\r\n                                <div>\r\n                                    <h2> {result.title}\r\n                                        <a href={result.url}> {result.url}</a>\r\n                                    </h2>\r\n                                </div>\r\n                                <div>\r\n                                    <h4>\r\n                                        {result.points} |\r\n                                        {result.author} |\r\n                                        {result.created_at} |\r\n                                        {result.num_comments}\r\n                                    </h4>\r\n\r\n                                </div>\r\n                            </>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n\r\n                    <h1>Search Results</h1>\r\n\r\n                </div>\r\n                <div>\r\n\r\n                    {this.handleSearchResults()}\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Results);","import React, { Component } from 'react';\nimport Search from './components/Search'\nimport History from './components/History/history'\nimport Result from './components/Results/Result';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container mt-12 text-center\">\n          <div className=\"column\">\n\n            <Search />\n\n            <History />\n\n            <Result />\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CREATE_SEARCH, FETCH_ARTICLES, FETCH_RESULTS_ERROR } from '../constants/searchConst'\r\n\r\nconst rootReducer = (state = ({searches:[],results:[]}), action) => {\r\n    switch (action.type) {\r\n        case CREATE_SEARCH:\r\n          return { ...state,\r\n            searches: [...state.searches, action.userInput] };\r\n        case FETCH_ARTICLES:\r\n          return { ...state,\r\n            results: action.results};\r\n        case FETCH_RESULTS_ERROR:\r\n          return {  \r\n            error: action.payload\r\n        };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;","export const CREATE_SEARCH = 'CREATE_SEARCH';\r\nexport const FETCH_ARTICLES = 'FETCH_ARTICLES';\r\nexport const FETCH_RESULTS_ERROR = 'FETCH_RESULTS_ERROR';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}